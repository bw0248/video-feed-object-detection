#!/usr/bin/env bash

VIRTUAL_CAM_NAME='vfod-cam'

function fail() {
    echo $1
    exit 1
}

function usage() {
    echo '
    $ ./run [--dev WEBCAM_DEVICE] [--virtual-dev VIRTUAL_CAM_DEVICE] [--tiny] [--gui]

    --dev           which webcam to use (defaults to  /dev/video0)
    --virtual-dev   virtual webcam to use/create (defaults to /dev/video99)
    --tiny          Whether to use tiny model (more fps, less accuracy)
    --gui           show simple opencv gui of actual webcam feed (w/o annotations)
    --fps           show fps in overlay
    '
    exit 0
}

cd "$(dirname "$0")"

cam_dev=/dev/video0    # actual webcam device, default to /dev/video0
virtual_cam_dev=/dev/video99
tiny=0
gui=0
fps=0
while [[ "$#" -gt 0 ]]
do
    case $1 in
        --usage | --help) usage; ;;
        --dev) cam_dev="$2"; shift ;;
        --virtual-dev) virtual_cam_dev="$2"; shift ;;
        --tiny) tiny=1 ;;
        --gui) gui=1 ;;
        --fps) fps=1 ;;
        *) fail "paramter $1 not recognized"
    esac
    shift
done

test -c "$cam_dev" || fail "webcam not found"

declare -A resources
resources['coco.names']='https://raw.githubusercontent.com/pjreddie/darknet/master/data/coco.names'

if [[ $tiny -eq 0 ]]
then 
    resources['yolov3-tiny.cfg']='https://raw.githubusercontent.com/pjreddie/darknet/master/cfg/yolov3-tiny.cfg'
    resources['yolov3-tiny.weights']='https://pjreddie.com/media/files/yolov3-tiny.weights'
else
    resources['yolov3.cfg']='https://raw.githubusercontent.com/pjreddie/darknet/master/cfg/yolov3.cfg'
    resources['yolov3.weights']='https://pjreddie.com/media/files/yolov3.weights'
fi

mkdir -p models && cd models

echo "downloading models"
for resource in "${!resources[@]}"
do
    if [ ! -f "$resource" ]
    then
        curl --fail -o "$resource" "${resources[$resource]}" \
            || fail "failed to dowload resource $resource  from ${resources[$resource]}"
    fi
done

echo "building project"
cd ..
mkdir -p build && cd build
cmake .. || fail "failed to build project"
cmake --build . --config release || fail "failed to build project"

echo "preparing virtual cam"
virtual_cam_num=$(tr -dc '0-9' <<< $virtual_cam_dev)
if [[ -z $(v4l2-ctl --list-devices | grep "$VIRTUAL_CAM_NAME") ]]
then
    echo "creating virtual cam"
    sudo modprobe v4l2loopback \
        devices=1 \
        video_nr=$virtual_cam_num \
        card_label=$VIRTUAL_CAM_NAME \
        exclusive_caps=1 || fail "could not create virtual cam"
fi
configured_cam_device=$(v4l2-ctl --list-devices \
    | grep -A 2 "$VIRTUAL_CAM_NAME" \
    | grep -Eo "/dev/video(.*)")

if test -z "$configured_cam_device"
then
    fail "could not configure virtual webcam, exiting"
fi

if [[ $tiny -eq 1 ]]; then args="--tiny"; else args=""; fi
if [[ $gui -eq 1 ]];  then args="$args --gui"; fi
if [[ $fps -eq 1 ]];  then args="$args --fps"; fi

./vfod $args --dev "$cam_dev" --virtual-dev "$configured_cam_device"
cd ..

